package com.example.server;

import org.springframework.stereotype.Controller;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class JobController {
	
	@Autowired 
	private JobRepository jobRepository;

	@RequestMapping("/")
	public String home()
	{
		return "index";
	}
	@GetMapping("/job")
	public String job(Job job)
	{
		return "add-job";
	}
	
	//add the department info
	@PostMapping("/add")
    public String add(@Valid Job job, BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "add-job";
        }

        jobRepository.save(job);
        model.addAttribute("job", jobRepository.findAll());
        return "job-list";
    }
	
	//Get the edit request
		@GetMapping("/edit/{id}")
		public String edit(@PathVariable("id") int no, Model model) {
		    Job job = jobRepository.findById(no)
		      .orElseThrow(() -> new IllegalArgumentException("Invalid department number:" + no));

		    model.addAttribute("job", job);
		    return "update-job";
		}
		
		//update the existing department info
		@PostMapping("/update/{id}")
		public String update(@PathVariable("id") int no, @Valid Job job,
		  BindingResult result, Model model) {
		    if (result.hasErrors()) {
		        job.setJobId(no);
		        return "update-dept";
		    }

		    jobRepository.save(job);
		    model.addAttribute("job", jobRepository.findAll());
		    return "job-list";
		}
		
		//delete a department info
		@GetMapping("/delete/{id}")
		public String delete(@PathVariable("id") int no, Model model) {
		    Job job= jobRepository.findById(no)
		      .orElseThrow(() -> new IllegalArgumentException("Invalid department Number:" + no));
		    jobRepository.delete(job);
		    model.addAttribute("users", jobRepository.findAll());
		    return "job-list";
		}
	
	@RequestMapping("/show")
    public String show(Model model)
    {
        model.addAttribute("job", jobRepository.findAll());
        return "job-list";
    }

}
